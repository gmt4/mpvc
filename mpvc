#!/bin/sh
#
# fyr - 2019 (c) MIT | /bin/sh mpvc
# control mpv remotely using JSON ipc
# https://mpv.io/manual/master/#json-ipc

SOCKETCOMMAND=""
SOCKET=${MPVC_SOCKET:-/tmp/mpvsocket}
MPVOPTIONS="--no-audio-display"

PROGNAME=$(basename $0)
PROGVERSION="1.3"

usage() {
    cat >&2 << EOF
Usage: $PROGNAME [-S "socket"] [-a "filenames"] [-o "path"] [-f "format string"]
    -p | --toggle       : Toggle playback.
    -s | --stop         : Always stop playback.
    -P | --play         : Always start playback.
    -f | --format       : Enter a formatting string.
    -a | --add          : Add files to playlist.
    -i | --playlist     : Print filenames of tracks to fit within terminal.
    -I | --fullplaylist : Print all filenames of tracks in current playlist.
    -o | --save         : Save current playlist to given path.
    -j | --track        : Go forwards/backwards through the playlist queue.
    -J | --tracknum     : Jump to playlist item number.
    -z | --shuffle      : Shuffle the current playlist.
    -l | --loop         : Loop currently playing playlist.
    -L | --loopfile     : Loop currently playing file.
    -v | --vol          : Increase/decrease volume relative to current volume.
    -V | --volume       : Set absolute volume.
    -m | --mute         : Toggle sound.
    -t | --seek         : Increases/decreases time relatively, accepts % values.
    -T | --time         : Set absolute time.
    -x | --speed        : Increase/decrease speed relative to the current speed.
    -X | --speedval     : Set absolute speed.
    -I | --image        : Enable adding of images to the queue.
    -k | --kill         : Kill the mpv process controlling the given socket.
    -K | --killall      : Kill all mpv processes indiscriminately.
    -S | --socket       : Set socket location [default: $SOCKET].
    -q | --quiet        : Surpress all text output.
    -Q | --vid=no       : Start mpv with video output disabled.
    -- |                : After adding files options after -- are passed to mpv.
    -h | --help         : Print this help.

Formatting:
    \`$PROGNAME --format\` will interpret the following delimiters if they are found:

    %name%, %path%, %dir%, %title%, %artist%, %album%, %albumartist%, comment%,
    %genre%, %year%, %percentage%, %playlistlength%, %position%, %repeat%,
    %single, %status%, %time%, %precisetime%, %speed%, %length%, %remaining%
    %volume%, %muted%, %frame%, %width%, %height%, %ab-loop-a%, %ab-loop-b%

MPC compatibility layer:
    mpvc features a nearly complete compatibility layer for mpc commands in
    addition to GNU style arguments. http://linux.die.net/man/1/mpc

Exit codes:
    0: Program ran succesfully.
    1: Input Argument error.
    2: Socket does not exist.
    3: Socket is not currently open.
    4: Dependency error.
EOF

    [  -z "$1" ] && exit || exit "$1"
}

dquiet() { "$@" >&2; }
equiet() { "$@" 2> /dev/null; }
oquiet() { "$@" 1> /dev/null; }
quiet() { "$@" > /dev/null 2>&1; }

_sockcmd() { printf '%s\n' "$@" | $SOCKETCOMMAND; }
sockcmd()  { oquiet _sockcmd "$@"; }
sockecmd() { equiet _sockcmd "$@"; }

pprintf() { printf "%s" "$@"; }
eprintf() { printf '%s\n' "$@" >&2; exit 1; }

    # Retrieval Functions
###############################################################################

# match given filename string to appropriate output
# accepted properties: filename
cleanFilename() {
    filename="$1"

    case "$filename" in
        *.googlevideo.com/*)
            filename="mps-yt stream"
            printf '%s\n' "$filename"
            ;;
        *youtu*|watch*)
            # no other option but to use jq
            if quiet type jq; then
                # this is fucking quick
                id="${filename#*.}"
                title="$(curl -sL \
"https://youtube.com/oembed?url=https://youtube.com/watch?v=$id" | \
jq -r '.title')"
            else
                title="$filename"
            fi

            printf '%s\n' "$title"
            ;;
        *)
            # return filename to relative path
            # this will probably look funky if there's a '/' in the filename
            filename=$(basename "$filename")
            printf '%s\n' "$filename"
            ;;
    esac
}

# accepted properties: media-title, path
getMediaProperties() {
    property="$1"

    mediaValue=$(sockecmd '{ "command": ["get_property", "'${property}'" ] }' |
        awk -F '"' '{print $4}')

    printf '%s\n' "$mediaValue" | escapeSedChar '&' | escapeSedChar '#'
}

# accepted properties: date, genre, title, album, artist, album_artist
getMetadata() {
    property=$1

    metadata=$(
        sockecmd '{ "command": ["get_property", "metadata/by-key/'${property}'" ] }' |
            tr -d "{}" | awk -F '"' '{print $4}')

    # test for no result
    case "$metadata" in
        "property not found")
            result="N/A"
            ;;
        *)
            result="$metadata"
            ;;
    esac

    # test if title has no property and return filename instead
    if [ "$property" = "title" ]; then
        case "$metadata" in
            "property not found")
                result=$(getPropertyString filename)
                ;;
            "error")
                result=$(getPropertyString filename)
                ;;
            *)
                result=$(cleanFilename "$result")
                ;;
        esac
    fi

    printf '%s' "$result" | escapeSedChar '&' | escapeSedChar '#'
}

# retrieve integer/boolean property
# accepted properties: mute, pause, loop-file, estimated-frame-number, width,
#                      height
getProperty() {
    property=$1

    result=$(sockecmd '{ "command": ["get_property", "'${property}'"] }' |
        awk -F '[:,]' '{gsub("\"",""); print $2}'
    )

    pprintf "$result"
}

# accepted properties: filename, idle-active, playlist-count, playlist-pos, playback-time,
#                      playtime-remaining, time-remaining, percent-pos,
#                      duration, volume
getPropertyString() {
    property=$1

    result=$(sockecmd '{ "command": ["get_property_string", "'${property}'"] }' |
        awk -F '[:,]' '{gsub("\"",""); print $2}'
    )

    case "$property" in
        volume|duration|percent-pos|playtime-remaining|playback-time)
            result=$(echo "$result" | sed 's/\.[0-9]\+%\?$//')
            ;;
    esac

    case "$result" in
        "error"|"null")
            [ $# -ge 2 ] && pprintf "$2" || pprintf "N/A"
            return 1
            ;;
        *)
            pprintf "$result"
            ;;
    esac
}

# accepted properties: speed
getSpeed() {
    speed=$(sockecmd '{ "command": ["get_property_string", "'speed'"] }' |
        awk -F '"' '{print substr ($4, 0, 4)}')

    printf '%s' "$speed"
}

# accepted properties: loop-file, loop-playlist
getLoopStatus() {
    property=$1

    case "$property" in
        loop-file)
            status=$(getProperty loop-file)
            ;;
        loop-playlist)
            status=$(sockecmd '{ "command": ["get_property", "loop-playlist"] }')
            case "$status" in
                *inf*) status="$(printf '%s\n' "$status" | cut -d\" -f 4)"               ;;
                *)     status="$(printf '%s\n' "$status" | awk -F '[":,]' '{print $4}')" ;;
            esac
    esac

    case "$status" in
        true | inf) loop="yes" ;;
        false)      loop="no"  ;;
        *)          loop="N/A" ;;
    esac

    printf '%s' "$loop"
}

getMuteStatus() {
    muted="$(getProperty mute)"

    case "$muted" in
        true)  muted="yes" ;;
        false) muted="no"  ;;
        *)     muted="N/A" ;;
    esac

    printf '%s' "$muted"
}

getPauseStatus() {
    status="$(getProperty pause)"

    case "$status" in
        true)  status="paused"  ;;
        false) status="playing" ;;
        *)     status="N/A"     ;;
    esac

    printf '%s' "$status"
}

# accepted properties: $1: filename $2: full path flag to skip basename
getPlaylistFilename() {
    track="$1"
    fullpathFlag="$2"

    filename=$(sockecmd '{ "command": ["get_property_string", "playlist/'$track'/filename"] }' |
        cut -d\" -f 4)

    [  "$fullpathFlag" != "fullpath" ] && filename=$(cleanFilename "$filename")

    printf '%s\n' "$filename"
}

# print all filenames in current playlist
getPlaylist() {
    noColour="$1"

    tracks=$(getPropertyString playlist-count)
    currentTrack=$(getPropertyString playlist-pos)

    [ "$tracks" -eq 0 ] || [ "$currentTrack" = "N/A" ] && {
        eprintf "${SOCKET} is currently idle."
    }

    calculateTerminalHeight

    while [ "$FIRST" -le "$LAST" ]; do
        filename=$(getPlaylistFilename $((FIRST - 1)))

        case "$noColour" in
            "nocolour")
                printf '%d	%s\n' "$FIRST" "${filename}"
                ;;
            *)
                if [ "$currentTrack" -eq $((FIRST - 1)) ]; then
                    printf '%d	[7m %s[0m\n' "$FIRST" "${filename}"
                else
                    printf '%d	 %s\n' "$FIRST" "${filename}"
                fi
                ;;
        esac

        FIRST=$((FIRST + 1))
    done
}

getFullPlaylist() {
    noColour="$1"

    tracks=$(getPropertyString playlist-count)
    currentTrack=$(getPropertyString playlist-pos)

    [  "$tracks" -eq 0 ] || [ "$currentTrack" = "N/A" ] && {
        eprintf "${SOCKET} is currently idle."
    }

    FIRST=1
    LAST=$(getPropertyString playlist-count)

    while [ "$FIRST" -le "$LAST" ]; do
        filename=$(getPlaylistFilename $((FIRST - 1)))

        case "$noColour" in
            "nocolour")
                printf '%d	%s\n' "$FIRST" "${filename}"
                ;;
            *)
                if [ "$currentTrack" -eq $((FIRST - 1)) ]; then
                    printf '%d	[7m %s[0m\n' "$FIRST" "${filename}"
                else
                    printf '%d	 %s\n' "$FIRST" "${filename}"
                fi
                ;;
        esac

        FIRST=$((FIRST + 1))
    done
}

# open mpvc to retrieve all metadata from a playlist file
getFilenameMetadata() {
    intCheck "$1" || exit 1

    trackToMetadata="$1"

    filename=$(getPlaylistFilename $trackToMetadata fullpath)
    echo $filename

    # mpvc -S /tmp/tempsock -m -a "$filename" -f \
# "Artist: %artist%"
}

# saves playlist to file but with no path checking. we live dangerously
savePlaylist() {
    saveLocation="$1"

    [ -e "$saveLocation.m3u" ] && {
        printf '%s\n' "Playlist exists! Overwrite? (y for yes, anything else no)"

        oldstty=$(stty -g)
        stty raw -echo; key="$(head -c 1)"; stty "$oldstty"
        case $key in
            y) rm "$saveLocation.m3u" ;;
            *) return                 ;;
        esac
    }

    printf '%s\n' "Adding files to $saveLocation.m3u..."

    FIRST=1
    LAST=$(getPropertyString playlist-count)

    while [ "$FIRST" -le "$LAST" ]; do
        printf '%s\n' "$(getPlaylistFilename $((FIRST - 1)) fullpath)" >> "$saveLocation".m3u

        FIRST=$((FIRST + 1))
    done

    QUIETFLAG="true"
}

    # Control Functions
###############################################################################

appendTrack() {
    filename="$@"

    # require absolute paths
    if [ -e "$filename" ]; then
        [ "$(printf "%s" "$filename" | cut -c 1)" != '/' ] && filename="$(pwd)/$filename"
    fi

    # skip over various other filetypes and images unless wanted
    # this doesn't stop mpv from resolving directories and adding them anyway
    case "$filename" in
        *.txt|*.log|*.cue)
            return
            ;;
        *.png|*.jpg|*.jpeg|*.gif|*.psd|*.pdf)
            [ "$IMAGEFLAG" != "true" ] && return
            ;;
        https*)
            ;;
    esac

    # test if socket is open to add more files too, else start mpv socket up
    if quiet pgrep -f "mpv .*$SOCKET"; then
        sockcmd '{ "command": ["loadfile", "'"$filename"'", "append-play" ] }'
    else
        exec mpv --really-quiet --idle=once --input-ipc-server="${SOCKET}" \
            $MPVOPTIONS "$filename" &

        oldstty=$(stty -g)
        # wait until mpv starts up
        while :; do
            idlestatus=$(getPropertyString idle-active)
            [ "$idlestatus" ] && break
            sleep 0.1
        done
        stty "$oldstty"
    fi

    filename=$(cleanFilename "$filename")

    printf '%s\n' "Adding: ${filename}"
}

playNext() {
    # add track to the playlist
    appendTrack "$1"

    # find position of track to move
    trackToMove="$(getPropertyString playlist-count)"

    # find position of current track
    newTrackPosition="$(getPropertyString playlist-pos)"

    QUIETFLAG="true"

    # set position of next track
    moveTrack "$trackToMove" "$((newTrackPosition + 1))"
}

setTimeRelative() {
    time=$(getPropertyString playback-time)

    printf '%s\n' "$1" | quiet grep "%" && {
        percentageValue=$(printf '%s\n' "$1" | rev | cut -c 2- | rev)
        sockcmd '{ "command": ["set_property", "percent-pos", '$percentageValue' ] }'
        return
    }

    sign=$(printf '%s' "$1" | cut -c 1)
    case "$sign" in
        -)
            minusFlag=true
            timeArg=$(printf '%s' "$1" | cut -c 2-)
            ;;
        +)
            timeArg=$(printf '%s' "$1" | cut -c 2-)
            ;;
        *)
            timeArg=$1
            ;;
    esac

    timeSec=$(parseTimeString "$timeArg") || exit $?

    case "$minusFlag" in
        "true") time=$((time - timeSec)) ;;
        *)      time=$((time + timeSec)) ;;
    esac

    sockcmd '{ "command": ["set_property", "playback-time", '$time' ] }'
}

setTimeAbsolute() {
    time=$(parseTimeString "$1") || exit $?

    trackTime=$(getPropertyString duration)

    [ "$time" -ge "$trackTime" ] && {
        printf '%s\n' "Given time is greater than track length! ($(trackLength))"
        QUIETFLAG="true"
        return 1
    }

    sockcmd '{ "command": "set_property", "playback-time", '$time' ] }'
}

setVolumeRelative() {
    intCheck "$1" || exit 1

    # test if media has sound
    volume=$(getPropertyString volume)

    [ "$volume" = "error" ] && {
        eprintf "Currently playing media does not have sound."
    }

    volume=$((volume + $1))

    [ $volume -lt 0 ] && {
        eprintf "Volume cannot be set lower than 0%"
    }

    [ $volume -gt 130 ] && {
        eprintf "Volume cannot be set great than 130%"
    }

    sockcmd '{ "command": ["set_property", "volume", '$volume' ] }'
}

setVolumeAbsolute() {
    intCheck "$1" || exit 1

    # test if media has sound
    volume=$(getPropertyString volume)

    [ "$volume" = "error" ] && {
        printf '%s\n' "Currently playing media does not have sound." >&2
        return 1
    }

    volume=$1

    [ $volume -lt 0 ] && {
        eprintf "Volume cannot be set lower than 0%"
    }

    [ $volume -gt 130 ] && {
        eprintf "Volume cannot be set great than 130%"
    }

    sockcmd '{ "command": ["set_property", "volume", '$volume' ] }'
}

setSpeedRelative() {
    validateBC
    speed=$(getSpeed)

    fltCheck "$1" || exit 1
    speed=$(printf '%s\n' "$speed+$1" | bc)

    sockcmd '{ "command": ["set_property_string", "speed", "'$speed'" ] }'
}

setSpeedAbsolute() {
    validateBC
    fltCheck "$1" || exit 1
    speed=$1

    sockcmd '{ "command": ["set_property_string", "speed", "'$speed'" ] }'
}

setTrackRelative() {
    intCheck "$1" || exit 1

    currentTrack=$(getPropertyString playlist-pos)
    desiredTrack=$((currentTrack + $1))
    trackCount=$(getPropertyString playlist-count)

    # if time is greater than 10 seconds, set time to 0
    [  "$desiredTrack" -lt "$currentTrack" ] && {
        seconds=$(getPropertyString playback-time)
        [ "$seconds" -ge 10 ] && {
            setTimeAbsolute 0
            return
        }
    }

    [ "$desiredTrack" -ge "$trackCount" ] && {
        repeat=$(getLoopStatus loop-playlist)
        [ "$repeat" = "yes" ] && {
            desiredTrack=0
        }
    }

    [ "$desiredTrack" -lt 0 ] && {
        repeat=$(getLoopStatus loop-file)
        if [ "$repeat" = "yes" ]; then
            setTrackAbsolute "$trackCount"
            return
        else
            desiredTrack=0
        fi
    }

    sockcmd '{ "command": ["set_property", "playlist-pos", '$desiredTrack' ] }'

    # tiny delay so printFinalOutput can catch up
    sleep 0.5
}

setTrackAbsolute() {
    intCheck "$1" || exit 1

    currentTrack=$1
    currentTrack=$((currentTrack - 1))
    trackCount=$(getPropertyString playlist-count)

    [ "$currentTrack" -lt 0 ] || [ "$currentTrack" -ge "$trackCount" ] && {
        eprintf "Item $currentTrack is out of range of playlist."
    }

    sockcmd '{ "command": ["set_property", "playlist-pos", '$currentTrack' ] }'

    # tiny delay so printFinalOutput can catch up
    sleep 0.5
}

moveTrack() {
    intCheck "$1" || exit 1

    if [ -z "$2" ]; then
        trackToMove=$(getPropertyString playlist-pos)
        newTrackPosition=$1
    else
        trackToMove=$1
        trackToMove=$((trackToMove - 1))
        newTrackPosition=$2
        trackCount=$(getPropertyString playlist-count)

        [ "$trackToMove" -lt 0 ] || [ "$trackToMove" -ge "$trackCount" ] && {
            eprintf "Item $trackToMove is out of range of playlist."
        }
    fi

    [ "$newTrackPosition" -lt 0 ] && {
        eprintf "Position $newTrackPosition is out of range of playlist."
    }

    [ "$newTrackPosition" -eq 1 ] && newTrackPosition=0

    sockcmd '{ "command": ["playlist-move", "'$trackToMove'", "'$newTrackPosition'" ] }'

    [ "$QUIETFLAG" != "true" ] && {
        getPlaylist
        QUIETFLAG="true"
    }
}

removeTrack() {
    trackToRemove=$1

    if [ "$trackToRemove" = "current" ]; then
        sockcmd '{ "command": ["playlist-remove", "'$trackToRemove'" ] }'
    else
        intCheck "$1" || exit 1

        trackToRemove=$((trackToRemove - 1))
        trackCount=$(getPropertyString playlist-count)

        [ "$trackToRemove" -lt 0 ] || [ "$trackToRemove" -ge "$trackCount" ] && {
            eprintf "Item $trackToRemove is out of range of playlist."
        }

        filename="$(getPlaylistFilename $trackToRemove)"

        sockcmd '{ "command": ["playlist-remove", "'$trackToRemove'" ] }'
    fi

    [  "$QUIETFLAG" != "true" ] && {
        eprintf "$filename has been removed from the playlist."
    }
}

alwaysPlay() {
    currentTrack=$(getPropertyString playlist-pos)
    [ "$currentTrack" = "N/A" ] && {
        setTrackAbsolute 1
        return
    }

    sockcmd '{ "command": ["set_property", "pause", false ] }'
}

alwaysPause() {
    status="true"
    sockcmd '{ "command": ["set_property", "pause", '$status' ] }'
}

togglePause() {
    currentTrack=$(getPropertyString playlist-pos)
    [ "$currentTrack" = "N/A" ] && {
        setTrackAbsolute 1
        return
    }

    status=$(getPauseStatus)
    [  "$status" = "playing" ] && status="true" || status="false"

    sockcmd '{ "command": ["set_property", "pause", '$status' ] }'
}

toggleMute() {
    if [  -z "$1" ]; then
        muted=$(getMuteStatus)
        [  "$muted" = "no" ] && muted="true" || muted="false"
    else
        muted=$1
    fi

    sockcmd '{ "command": ["set_property", "mute", '$muted' ] }'
}

toggleLoopFile() {
    loopFile=$(getLoopStatus loop-file)
    [ "$loopFile" = "no" ] && loopFile="inf" || loopFile="no"

    sockcmd '{ "command": ["set_property_string", "loop-file", "'$loopFile'" ] }'
}

toggleLoopPlaylist() {
    loopPlaylist=$(getLoopStatus loop-playlist)
    [ "$loopPlaylist" = "no" ] && loopPlaylist="inf" || loopPlaylist="no"

    sockcmd '{ "command": ["set_property_string", "loop-playlist", "'$loopPlaylist'" ] }'
}

shufflePlaylist() {
    sockcmd '{ "command": ["playlist-shuffle" ] }'

    [  "$QUIETFLAG" != "true" ] && {
        printf '%s\n' "Playlist shuffled."
        QUIETFLAG="true"
    }

    [ "$(getLoopStatus loop-playlist)" != "yes" ] && toggleLoopPlaylist inf
}

cropPlaylist() {
    sockcmd '{ "command": ["playlist-clear" ] }'

    [ "$QUIETFLAG" != "true" ] && {
        getPlaylist
        QUIETFLAG="true"
    }
}

clearPlaylist() {
    QUIETFLAG="true"

    # kill any running process of mpvc add
    quiet pgrep -f "mpvc add" && pkill -f "mpvc add"

    cropPlaylist
    removeTrack 1
    printf '%s\n' "Playlist cleared."
}

# quit mpv process on given socket
killSocket() {
    sockcmd '{ "command": ["quit"] }'
    exit
}

# kill all instances of mpv running under your user
killAllMpv() {
    quiet pkill "mpv"
    exit
}

    # Time Functions
###############################################################################

elapsedTime() {
    time=$(getPropertyString playback-time)
    formatTime "$time"
}

preciseElapsedTime() {
    time=$(getPropertyString playback-time 0.0)
    bigTime=${time%%.*}
    tinyTime=${time#*.}
    formatTime "$bigTime" "$tinyTime"
}

trackLength() {
    duration=$(getPropertyString duration)
    formatTime "$duration"
}

playtimeRemaining() {
    playtime=$(getPropertyString playtime-remaining)
    formatTime "$playtime"
}

# format seconds into HH:MM:SS format
formatTime() {
    [  "$1" = "N/A" ] && return 1

    rawSeconds=$1
    seconds=$((rawSeconds % 60))
    minutes=$((rawSeconds / 60))
    hours=$((minutes / 60))

    [ $seconds -lt 10 ] && seconds="0$seconds"
    [ $minutes -ge 60 ] && minutes=$((minutes - hours*60))
    [ $minutes -lt 10 ] && minutes="0$minutes"
    [ $hours -lt 10 ] && hours="0$hours"

    if [ -z "$2" ]; then
        printf '%s\n' "$hours:$minutes:$seconds"
    else
        milleSeconds=$2
        printf '%s\n' "$hours:$minutes:$seconds.$milleSeconds"
    fi
}

    # Formatting and Printing Functions
###############################################################################

# formats and prints according to $FORMATSTRING
formatPrint() {
    # modified format string
    FORMATSTRING=$(printf '%s\n' "$FORMATSTRING" | sed "
    s#%status%#$(getPauseStatus)#g
    s#%year%#$(getMetadata date)#g
    s#%genre%#$(getMetadata genre)#g
    s#%title%#$(getMetadata title)#g
    s#%album%#$(getMetadata album)#g
    s#%artist%#$(getMetadata artist)#g
    s#%comment%#$(getMetadata comment)#g
    s#%albumartist%#$(getMetadata album_artist)#g
    s#%speed%#$(getSpeed)#g
    s#%time%#$(elapsedTime)#g
    s#%precisetime%#$(preciseElapsedTime)#g
    s#%volume%#$(getPropertyString volume)#g
    s#%length%#$(trackLength)#g
    s#%remaining%#$(playtimeRemaining)#g
    s#%muted%#$(getMuteStatus)#g
    s#%percentage%#$(getPropertyString percent-pos)#g
    s#%name%#$(getMediaProperties filename)#g
    s#%path%#$(getMediaProperties path)#g
    s#%dir%#$(getPropertyString working-directory)#g
    s#%repeat%#$(getLoopStatus loop-playlist)#g
    s#%single%#$(getLoopStatus loop-file)#g
    s#%playlistlength%#$(getPropertyString playlist-count)#g
    s#%position%#$(($(getPropertyString playlist-pos) + 1))#g
    s#%frame%#$(getProperty estimated-frame-number)#g
    s#%width%#$(getProperty width)#g
    s#%height%#$(getProperty height)#g
    s#%ab-loop-a%#$(getProperty ab-loop-a)#g
    s#%ab-loop-b%#$(getProperty ab-loop-b)#g
    ")

    printf '%s\n' "${FORMATSTRING}"
    exit
}

# print default status of mpv instance
printDefaultStatus() {
    artist=$(getMetadata artist)

    case "$artist" in
        "N/A")
            FORMATSTRING="\
%title%
[%status%] #%position%/%playlistlength% %time%/%length% (%percentage%%)
speed: %speed%x volume: %volume%% muted: %muted% repeat: %repeat% single: %single%"
            ;;
        *)
            FORMATSTRING="\
${artist} - %title%
[%status%] #%position%/%playlistlength% %time%/%length% (%percentage%%)
speed: %speed%x volume: %volume%% muted: %muted% repeat: %repeat% single: %single%"
            ;;
    esac

    formatPrint
}

printPrettyOutput() {
    exit 0
}

# catches if mpv is idle or not
printFinalOutput() {
    case "$QUIETFLAG" in
        "true") ;;
        *)
            if [ "$(getPropertyString idle-active)" = "yes" ]; then
                printf '%s\n' "MPV instance on ${SOCKET} is currently idle." >&2
            else
                printDefaultStatus
            fi
    esac
}

    # Misc. Functions
###############################################################################

escapeSedChar() {
    awk ' { gsub("'$1'", "\\'$1'"); print $0; }'
}

intCheck() {
    [ "$1" -ne 0 ] 2> /dev/null
    [ "$?" -ne 2 ] || return 1
}

fltCheck() {
    intCheck "$1" && return 0

    case "$1" in
        *[0-9].[0-9]*)    return 0 ;;
        *.*.*|*[!-.0-9]*) ;;
    esac

    return 1
}

calculateTerminalHeight() {
    rows=$(($(tput lines) - 2))
    halfrows=$((rows / 2))

    [  "$tracks" -gt $rows ] && {
        [ "$currentTrack" -le $halfrows ] && {
            FIRST=1
            LAST=$rows
            return
        }

        [  $((currentTrack + halfrows)) -ge "$tracks" ] && {
            FIRST=$((tracks - rows + 1))
            LAST=$tracks
            return
        }

        [  $((currentTrack + halfrows)) -lt "$tracks" ] && {
            FIRST=$((currentTrack - halfrows + 1))
            LAST=$((currentTrack + halfrows))
            return
        }
    }

    FIRST=1
    LAST=$tracks
}

parseTimeString() {
    printf '%s' "$1" | grep -q -e "^\([0-9.]*:\)\{0,2\}[0-9.]*$" -e "^[0-9]*[sSmMhH]$" || {
        cat >&2 << EOF
Timestamp formats must match either H:M:S with hour and minute fields optional,
or a single integer number with a unit of time appended: h, m, s.
EOF
        exit 1
    }

    lastChar=$(printf '%s\n' "$1" | rev | cut -c 1)

    case "$lastChar" in
        s|S|m|M|h|H)
            timeInt=$(printf '%s' "$1" | rev | cut -c 2- | rev)

            intCheck "$timeInt" || exit 1

            case "$lastChar" in
                h|H) timeInt=$((timeInt * 60 * 60)) ;;
                m|M) timeInt=$((timeInt * 60))      ;;
            esac

            ;;
        *)
            timeInt=$(printf '%s' "$1" | awk -F ':' '{
                time=0
                for (x=1; x<=NF; x++) time=time*60+$x
                    printf "%d\n", time
                    exit
            }')

            ;;
    esac

    printf "%d" "$timeInt"
}

validateDeps() {
    quiet type mpv || {
        printf '%s\n' "Cannot find mpv on your \$PATH." >&2
        exit 4
    }

    quiet type nc && SOCKETCOMMAND="nc -U -N $SOCKET"
    quiet type socat && SOCKETCOMMAND="socat - $SOCKET"

    [ "$SOCKETCOMMAND" ] || {
        printf '%s\n' "Cannot find socat or nc on your \$PATH." >&2
        exit 4
    }
}

validateBC() {
    quiet type bc || {
        pprintf "Cannot find bc on your \$PATH.\n"
        pprintf "Please install for speed control.\n"
        exit 4
    }
}

validateSocket() {
    [ "$PLAYFLAG" != "true" ] && {
        # test if socket exists
        [ -S "$SOCKET" ] || {
            printf '%s\n' "$SOCKET does not exist. Use mpv --input-ipc-server to start one." >&2
            exit 2
        }

        # test if socket is open
        [ "$(getPauseStatus)" = "N/A" ] && {
            printf '%s\n' "No files added to $SOCKET."
            exit 3
        }
    }
}

getVersion() {
    mpv --version

    pprintf "MPVC Release $PROGVERSION (c) Laurence Willetts MIT"
    exit
}

main() {
    validateDeps

    # grab mpv options first if any
    for arg in "$@"; do
        [ "$MPVFLAG" = "true" ] && {
            MPVOPTIONS="$MPVOPTIONS $arg"
        } || {
            [ "$arg" = "--" ] && MPVFLAG=true
        }
    done

    # grab piped input for input if it exists
    if [ -p /dev/stdin ]; then
        QUIETFLAG="true"

        while read -r line; do
            [ -f "$line" ] && appendTrack "${line}"
        done
    fi

    case "$1" in
        add|-a|--append)
            shiftcount=0
            QUIETFLAG="true"

            for arg in "$@"; do
                echo "$arg" | grep -q '^https\?://'  && {
                    appendTrack "$arg"
                    shiftcount=$((shiftcount + 1))
                }

                [ -f "$arg" ] && {
                    appendTrack "$arg"
                    shiftcount=$((shiftcount + 1))
                }
            done

            shift "$((shiftcount + 1))"
            ;;
    esac

    case "$1" in
        add|-a|--append|playnext|-A|--playnext)
            ;;
        *)
            validateSocket
            ;;
    esac

    # mpc compatibility layer
    case "$1" in
        play|start|resume)
            case "$2" in
                0)
                    setTrackAbsolute 1
                    ;;
                $)
                    setTrackAbsolute "$(getPropertyString playlist-count)"
                    ;;
                *)
                    intCheck "$2" && setTrackAbsolute "$2"
                    ;;
            esac

            alwaysPlay
            printFinalOutput
            ;;
        vol|volume)
            firstChar=$(printf '%s\n' "$2" | cut -c 1)
            case "$firstChar" in
                "+")
                    volume=$(printf '%s\n' "$2" | cut -d+ -f2)
                    setVolumeRelative "$volume"
                    ;;
                "-")
                    volume=$(printf '%s\n' "$2" | cut -d- -f2)
                    setVolumeRelative "-${volume}"
                    ;;
                *)
                    [ -n "$2" ] && {
                        setVolumeAbsolute "$2"
                    } || {
                        printf '%s\n' "Specify volume in/decrease amount or absolute amount."
                        return 1
                    }
                    ;;
            esac

            printFinalOutput
            ;;
        repeat)
            case "$2" in
                "on")  toggleLoopPlaylist inf ;;
                "off") toggleLoopPlaylist no  ;;
                *)     toggleLoopPlaylist     ;;
            esac

            printFinalOutput
            ;;
        single)
            case "$2" in
                "on")  toggleLoopFile yes ;;
                "off") toggleLoopFile no  ;;
                *)     toggleLoopFile     ;;
            esac

            printFinalOutput
            ;;
        metadata) getFilenameMetadata "$2" ;;
        pause)    alwaysPause         ; printFinalOutput ;;
        next)     setTrackRelative 1  ; printFinalOutput ;;
        prev)     setTrackRelative -1 ; printFinalOutput ;;
        move)     moveTrack "$2" "$3" ; printFinalOutput ;;
        mute)     toggleMute true     ; printFinalOutput ;;
        unmute)   toggleMute false    ; printFinalOutput ;;
        pretty)   printPrettyOutput ;;
        # find) do fuzzy search
        # idleloop) observe_property
        # consume) to implement # add on|off toggle
        # random) MPV doesn't have this control option!
        # create an issue or implement puesdo-random tracks
    esac

    # GNU-style options
    for arg in "$@"; do
        [ "$SEEKFLAG"     = "true" ] && setTimeRelative "$arg";   SEEKFLAG=false
        [ "$TIMEFLAG"     = "true" ] && setTimeAbsolute "$arg";   TIMEFLAG=false
        [ "$VOLFLAG"      = "true" ] && setVolumeRelative "$arg"; VOLFLAG=false
        [ "$VOLUMEFLAG"   = "true" ] && setVolumeAbsolute "$arg"; VOLUMEFLAG=false
        [ "$SPEEDFLAG"    = "true" ] && setSpeedRelative "$arg";  SPEEDFLAG=false
        [ "$SPEEDVALFLAG" = "true" ] && setSpeedAbsolute "$arg";  SPEEDVALFLAG=false
        [ "$TRACKFLAG"    = "true" ] && setTrackRelative "$arg";  TRACKFLAG=false
        [ "$TRACKVALFLAG" = "true" ] && setTrackAbsolute "$arg";  TRACKVALFLAG=false
        [ "$REMOVEFLAG"   = "true" ] && removeTrack "$arg";       REMOVEFLAG=false
        [ "$SAVEFLAG"     = "true" ] && savePlaylist "$arg";      SAVEFLAG=false
        [ "$PLAYNEXT"     = "true" ] && playNext "$arg";          PLAYNEXT=false

        case "$arg" in
            -t|--seek|seek)                  SEEKFLAG=true                  ;;
            -T|--time)                       TIMEFLAG=true                  ;;
            -v|--vol)                        VOLFLAG=true                   ;;
            -V|--volume)                     VOLUMEFLAG=true                ;;
            -x|--speed|speed)                SPEEDFLAG=true                 ;;
            -X|--speedval)                   SPEEDVALFLAG=true              ;;
            -j|--track)                      TRACKFLAG=true                 ;;
            -J|--tracknum)                   TRACKVALFLAG=true              ;;
            -r|--remove|rm|remove|del)       REMOVEFLAG=true                ;;
            --save|save)                     SAVEFLAG=true                  ;;
            -s|--stop|stop)                  alwaysPause; setTimeAbsolute 0 ;;
            -P|--play|play)                  alwaysPlay                     ;;
            -A|--playnext|playnext)          PLAYNEXT=true                  ;;
            -p|--toggle|toggle)              togglePause                    ;;
            -m|--mute)                       toggleMute                     ;;
            mute)                            toggleMute true                ;;
            unmute)                          toggleMute false               ;;
            -i|--playlist|playlist)          getPlaylist; exit              ;;
            -I|--fullplaylist|fullplaylist)  getFullPlaylist; exit          ;;
            -L|--loop|loop)                  toggleLoopPlaylist             ;;
            -l|--loopfile|loopfile)          toggleLoopFile                 ;;
            -z|--shuffle|shuffle)            shufflePlaylist                ;;
            -c|--crop|crop)                  cropPlaylist                   ;;
            -C|--clear|clear)                clearPlaylist                  ;;
            -k|--kill|kill)                  killSocket                     ;;
            --version|version)               getVersion                     ;;
            -f|--format)                     continue                       ;;
            -a|--append)                     continue                       ;;
            -S|--socket)                     continue                       ;;
            -[1-9][0-9][0-9][0-9][0-9][0-9]) continue                       ;;
            --|---|----)                     continue                       ;;
            -?)                              usage 1                        ;;
        esac
    done

    # produce format strings last
    [ "$QUIETFLAG" != "true" ] && {
        [ -n "$FORMATSTRING" ] && formatPrint
        printFinalOutput
    }
}

# more global argument parsing
for arg in "$@"; do
    [ "$SOCKETFLAG" = "true" ] && SOCKET=$arg && SOCKETFLAG=false
    [ "$FORMATFLAG" = "true" ] && FORMATSTRING=$arg && FORMATFLAG=false

    case $arg in
        --version)        getVersion                        ;;
        -q|--quiet)       QUIETFLAG=true                    ;;
        -I|--image)       IMAGEFLAG=true                    ;;
        -S|--socket)      SOCKETFLAG=true                   ;;
        -f|--format)      FORMATFLAG=true                   ;;
        -Q|--vid=no)      MPVOPTIONS="$MPVOPTIONS --vid=no" ;;
        -K|--killall)     killAllMpv                        ;;
        --list-options)   usage 0                           ;;
        -h|--help|h|help) usage 0                           ;;
    esac
done

[ "$QUIETFLAG" = "true" ] && {
    quiet main "$@"
} || {
    main "$@"
}
